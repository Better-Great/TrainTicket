#!/usr/bin/env python3
"""
Generate comprehensive dev.application.ini with all property values

Usage:
    python3 generate-dev-properties.py [project-root] [environment]
    
Arguments:
    project-root: Path to TrainTicket project (default: parent of current directory)
    environment: Target environment name (default: dev)
"""
import sys
from pathlib import Path

# Service ports mapping - Update this as services are added
SERVICE_PORTS = {
    'AdminBasicInfoService': '18767',
    'AdminOrderService': '16112',
    'AdminRouteService': '16113',
    'AdminTravelService': '16114',
    'AdminUserService': '16115',
    'AssuranceService': '18888',
    'AuthService': '12340',
    'AvatarService': '17001',
    'BasicService': '15680',
    'CancelService': '18885',
    'ConfigService': '15679',
    'ConsignPriceService': '16110',
    'ConsignService': '16111',
    'ContactsService': '12347',
    'DeliveryService': '18808',
    'ExecuteService': '12386',
    'FoodDeliveryService': '18957',
    'FoodService': '18856',
    'GatewayService': '18888',
    'InsidePaymentService': '18673',
    'NewsService': '16900',
    'NotificationService': '17853',
    'OrderService': '12031',
    'OrderOtherService': '12032',
    'PaymentService': '19001',
    'PreserveService': '14568',
    'PreserveOtherService': '14569',
    'PriceService': '16579',
    'RebookService': '18886',
    'RoutePlanService': '14578',
    'RouteService': '11178',
    'SeatService': '18898',
    'SecurityService': '11188',
    'StationService': '12345',
    'StationFoodService': '18855',
    'TicketOfficeService': '16108',
    'TrainService': '14567',
    'TrainFoodService': '19999',
    'TravelService': '12346',
    'Travel2Service': '16346',
    'TravelPlanService': '14322',
    'UserService': '12342',
    'VerificationCodeService': '15678',
    'VoucherService': '16101',
    'WaitOrderService': '17525',
}

# Services with databases - Update as needed
DB_SERVICES = [
    'Assurance', 'Auth', 'Config', 'Consign', 'ConsignPrice', 'Contacts',
    'Delivery', 'FoodDelivery', 'Food', 'InsidePayment', 'Notification',
    'Order', 'OrderOther', 'Payment', 'Price', 'Route', 'Security',
    'Station', 'StationFood', 'Train', 'TrainFood', 'Travel', 'Travel2',
    'User', 'WaitOrder', 'TicketOffice', 'Voucher'
]

def generate_properties(project_root, environment='dev'):
    """Generate comprehensive properties file"""
    
    properties_content = f"""# ==============================================================================
# TrainTicket Microservices - {environment.upper()} Environment Configuration
# ==============================================================================
# Auto-generated configuration file with all service properties
# Generated by: config-generator/generate-dev-properties.py
# ==============================================================================

# ------------------------------------------------------------------------------
# Common / Shared Properties
# ------------------------------------------------------------------------------
NacosAddrs=nacos-0.nacos-headless.default.svc.cluster.local,nacos-1.nacos-headless.default.svc.cluster.local,nacos-2.nacos-headless.default.svc.cluster.local
RabbitmqHost=localhost
MongodbPassword=password
EmailAddress=no-reply@trainticket.com
EmailPassword=changeme

# ------------------------------------------------------------------------------
# Service Ports and Hosts
# ------------------------------------------------------------------------------
"""
    
    # Add service ports and hosts
    for service_name, port in sorted(SERVICE_PORTS.items()):
        service_host = 'ts-' + ''.join(['-' + c.lower() if c.isupper() else c for c in service_name])[1:]
        properties_content += f"{service_name}Port={port}\n"
        properties_content += f"{service_name}Host={service_host}\n"
    
    properties_content += """
# ------------------------------------------------------------------------------
# MySQL Database Configurations
# ------------------------------------------------------------------------------
"""
    
    for service in sorted(DB_SERVICES):
        db_name = 'ts-' + ''.join(['-' + c.lower() if c.isupper() else c for c in service])[1:] + '-mysql'
        properties_content += f"\n# {service} Service Database\n"
        properties_content += f"{service}MysqlHost={db_name}\n"
        properties_content += f"{service}MysqlPort=3306\n"
        properties_content += f"{service}MysqlDatabase={db_name}\n"
        properties_content += f"{service}MysqlUser=root\n"
        properties_content += f"{service}MysqlPassword=root\n"
    
    properties_content += """
# ------------------------------------------------------------------------------
# Non-Java Services Configuration
# ------------------------------------------------------------------------------

# Service URLs (for inter-service communication)
OrderServiceUrl=http://ts-order-service:12031
OrderOtherServiceUrl=http://ts-order-other-service:12032
"""
    
    # Write the file
    output_file = project_root / 'properties' / f'{environment}.application.ini'
    output_file.parent.mkdir(exist_ok=True)
    
    with open(output_file, 'w') as f:
        f.write(properties_content)
    
    print(f"✓ Generated: {output_file}")
    print(f"✓ Total service ports: {len(SERVICE_PORTS)}")
    print(f"✓ Total database configs: {len(DB_SERVICES)}")
    print(f"✓ Total properties: ~{len(SERVICE_PORTS)*2 + len(DB_SERVICES)*5 + 10}")

def main():
    # Get project root from command line or use parent of current directory
    if len(sys.argv) > 1:
        project_root = Path(sys.argv[1]).resolve()
    else:
        project_root = Path(__file__).parent.parent.resolve()
    
    # Get environment from command line or use 'dev'
    environment = sys.argv[2] if len(sys.argv) > 2 else 'dev'
    
    print(f"Project root: {project_root}")
    print(f"Environment: {environment}\n")
    
    generate_properties(project_root, environment)

if __name__ == '__main__':
    main()
